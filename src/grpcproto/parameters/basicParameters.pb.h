// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basicParameters.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_basicParameters_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_basicParameters_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basicParameters_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_basicParameters_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_basicParameters_2eproto;
namespace Xproject {
class BasicParameters;
class BasicParametersDefaultTypeInternal;
extern BasicParametersDefaultTypeInternal _BasicParameters_default_instance_;
}  // namespace Xproject
PROTOBUF_NAMESPACE_OPEN
template<> ::Xproject::BasicParameters* Arena::CreateMaybeMessage<::Xproject::BasicParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Xproject {

enum BasicParameters_DesignYears : int {
  BasicParameters_DesignYears_FIFTY = 0,
  BasicParameters_DesignYears_HUNDRED = 1,
  BasicParameters_DesignYears_BasicParameters_DesignYears_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_DesignYears_BasicParameters_DesignYears_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_DesignYears_IsValid(int value);
constexpr BasicParameters_DesignYears BasicParameters_DesignYears_DesignYears_MIN = BasicParameters_DesignYears_FIFTY;
constexpr BasicParameters_DesignYears BasicParameters_DesignYears_DesignYears_MAX = BasicParameters_DesignYears_HUNDRED;
constexpr int BasicParameters_DesignYears_DesignYears_ARRAYSIZE = BasicParameters_DesignYears_DesignYears_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_DesignYears_descriptor();
template<typename T>
inline const std::string& BasicParameters_DesignYears_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_DesignYears>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_DesignYears_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_DesignYears_descriptor(), enum_t_value);
}
inline bool BasicParameters_DesignYears_Parse(
    const std::string& name, BasicParameters_DesignYears* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_DesignYears>(
    BasicParameters_DesignYears_descriptor(), name, value);
}
enum BasicParameters_SiteType : int {
  BasicParameters_SiteType_A = 0,
  BasicParameters_SiteType_B = 1,
  BasicParameters_SiteType_C = 2,
  BasicParameters_SiteType_D = 3,
  BasicParameters_SiteType_BasicParameters_SiteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_SiteType_BasicParameters_SiteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_SiteType_IsValid(int value);
constexpr BasicParameters_SiteType BasicParameters_SiteType_SiteType_MIN = BasicParameters_SiteType_A;
constexpr BasicParameters_SiteType BasicParameters_SiteType_SiteType_MAX = BasicParameters_SiteType_D;
constexpr int BasicParameters_SiteType_SiteType_ARRAYSIZE = BasicParameters_SiteType_SiteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_SiteType_descriptor();
template<typename T>
inline const std::string& BasicParameters_SiteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_SiteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_SiteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_SiteType_descriptor(), enum_t_value);
}
inline bool BasicParameters_SiteType_Parse(
    const std::string& name, BasicParameters_SiteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_SiteType>(
    BasicParameters_SiteType_descriptor(), name, value);
}
enum BasicParameters_CalculateArea : int {
  BasicParameters_CalculateArea_Corner = 0,
  BasicParameters_CalculateArea_Wall = 1,
  BasicParameters_CalculateArea_Other = 2,
  BasicParameters_CalculateArea_BasicParameters_CalculateArea_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_CalculateArea_BasicParameters_CalculateArea_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_CalculateArea_IsValid(int value);
constexpr BasicParameters_CalculateArea BasicParameters_CalculateArea_CalculateArea_MIN = BasicParameters_CalculateArea_Corner;
constexpr BasicParameters_CalculateArea BasicParameters_CalculateArea_CalculateArea_MAX = BasicParameters_CalculateArea_Other;
constexpr int BasicParameters_CalculateArea_CalculateArea_ARRAYSIZE = BasicParameters_CalculateArea_CalculateArea_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_CalculateArea_descriptor();
template<typename T>
inline const std::string& BasicParameters_CalculateArea_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_CalculateArea>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_CalculateArea_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_CalculateArea_descriptor(), enum_t_value);
}
inline bool BasicParameters_CalculateArea_Parse(
    const std::string& name, BasicParameters_CalculateArea* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_CalculateArea>(
    BasicParameters_CalculateArea_descriptor(), name, value);
}
enum BasicParameters_SeismicFortification : int {
  BasicParameters_SeismicFortification_STANDARD = 0,
  BasicParameters_SeismicFortification_EMPHASIS = 1,
  BasicParameters_SeismicFortification_SPECIAL = 2,
  BasicParameters_SeismicFortification_MODERATE = 3,
  BasicParameters_SeismicFortification_BasicParameters_SeismicFortification_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_SeismicFortification_BasicParameters_SeismicFortification_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_SeismicFortification_IsValid(int value);
constexpr BasicParameters_SeismicFortification BasicParameters_SeismicFortification_SeismicFortification_MIN = BasicParameters_SeismicFortification_STANDARD;
constexpr BasicParameters_SeismicFortification BasicParameters_SeismicFortification_SeismicFortification_MAX = BasicParameters_SeismicFortification_MODERATE;
constexpr int BasicParameters_SeismicFortification_SeismicFortification_ARRAYSIZE = BasicParameters_SeismicFortification_SeismicFortification_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_SeismicFortification_descriptor();
template<typename T>
inline const std::string& BasicParameters_SeismicFortification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_SeismicFortification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_SeismicFortification_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_SeismicFortification_descriptor(), enum_t_value);
}
inline bool BasicParameters_SeismicFortification_Parse(
    const std::string& name, BasicParameters_SeismicFortification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_SeismicFortification>(
    BasicParameters_SeismicFortification_descriptor(), name, value);
}
enum BasicParameters_SeismicSiteType : int {
  BasicParameters_SeismicSiteType_I0 = 0,
  BasicParameters_SeismicSiteType_I1 = 1,
  BasicParameters_SeismicSiteType_II = 2,
  BasicParameters_SeismicSiteType_III = 3,
  BasicParameters_SeismicSiteType_IV = 4,
  BasicParameters_SeismicSiteType_BasicParameters_SeismicSiteType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_SeismicSiteType_BasicParameters_SeismicSiteType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_SeismicSiteType_IsValid(int value);
constexpr BasicParameters_SeismicSiteType BasicParameters_SeismicSiteType_SeismicSiteType_MIN = BasicParameters_SeismicSiteType_I0;
constexpr BasicParameters_SeismicSiteType BasicParameters_SeismicSiteType_SeismicSiteType_MAX = BasicParameters_SeismicSiteType_IV;
constexpr int BasicParameters_SeismicSiteType_SeismicSiteType_ARRAYSIZE = BasicParameters_SeismicSiteType_SeismicSiteType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_SeismicSiteType_descriptor();
template<typename T>
inline const std::string& BasicParameters_SeismicSiteType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_SeismicSiteType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_SeismicSiteType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_SeismicSiteType_descriptor(), enum_t_value);
}
inline bool BasicParameters_SeismicSiteType_Parse(
    const std::string& name, BasicParameters_SeismicSiteType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_SeismicSiteType>(
    BasicParameters_SeismicSiteType_descriptor(), name, value);
}
enum BasicParameters_WindLoadCalMethod : int {
  BasicParameters_WindLoadCalMethod_LOADCODE = 0,
  BasicParameters_WindLoadCalMethod_CUSTOMIZE = 1,
  BasicParameters_WindLoadCalMethod_ACTUALCAL = 2,
  BasicParameters_WindLoadCalMethod_BasicParameters_WindLoadCalMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BasicParameters_WindLoadCalMethod_BasicParameters_WindLoadCalMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BasicParameters_WindLoadCalMethod_IsValid(int value);
constexpr BasicParameters_WindLoadCalMethod BasicParameters_WindLoadCalMethod_WindLoadCalMethod_MIN = BasicParameters_WindLoadCalMethod_LOADCODE;
constexpr BasicParameters_WindLoadCalMethod BasicParameters_WindLoadCalMethod_WindLoadCalMethod_MAX = BasicParameters_WindLoadCalMethod_ACTUALCAL;
constexpr int BasicParameters_WindLoadCalMethod_WindLoadCalMethod_ARRAYSIZE = BasicParameters_WindLoadCalMethod_WindLoadCalMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BasicParameters_WindLoadCalMethod_descriptor();
template<typename T>
inline const std::string& BasicParameters_WindLoadCalMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BasicParameters_WindLoadCalMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BasicParameters_WindLoadCalMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BasicParameters_WindLoadCalMethod_descriptor(), enum_t_value);
}
inline bool BasicParameters_WindLoadCalMethod_Parse(
    const std::string& name, BasicParameters_WindLoadCalMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BasicParameters_WindLoadCalMethod>(
    BasicParameters_WindLoadCalMethod_descriptor(), name, value);
}
// ===================================================================

class BasicParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Xproject.BasicParameters) */ {
 public:
  BasicParameters();
  virtual ~BasicParameters();

  BasicParameters(const BasicParameters& from);
  BasicParameters(BasicParameters&& from) noexcept
    : BasicParameters() {
    *this = ::std::move(from);
  }

  inline BasicParameters& operator=(const BasicParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicParameters& operator=(BasicParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicParameters* internal_default_instance() {
    return reinterpret_cast<const BasicParameters*>(
               &_BasicParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BasicParameters& a, BasicParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicParameters* New() const final {
    return CreateMaybeMessage<BasicParameters>(nullptr);
  }

  BasicParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicParameters& from);
  void MergeFrom(const BasicParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Xproject.BasicParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_basicParameters_2eproto);
    return ::descriptor_table_basicParameters_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BasicParameters_DesignYears DesignYears;
  static constexpr DesignYears FIFTY =
    BasicParameters_DesignYears_FIFTY;
  static constexpr DesignYears HUNDRED =
    BasicParameters_DesignYears_HUNDRED;
  static inline bool DesignYears_IsValid(int value) {
    return BasicParameters_DesignYears_IsValid(value);
  }
  static constexpr DesignYears DesignYears_MIN =
    BasicParameters_DesignYears_DesignYears_MIN;
  static constexpr DesignYears DesignYears_MAX =
    BasicParameters_DesignYears_DesignYears_MAX;
  static constexpr int DesignYears_ARRAYSIZE =
    BasicParameters_DesignYears_DesignYears_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DesignYears_descriptor() {
    return BasicParameters_DesignYears_descriptor();
  }
  template<typename T>
  static inline const std::string& DesignYears_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DesignYears>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DesignYears_Name.");
    return BasicParameters_DesignYears_Name(enum_t_value);
  }
  static inline bool DesignYears_Parse(const std::string& name,
      DesignYears* value) {
    return BasicParameters_DesignYears_Parse(name, value);
  }

  typedef BasicParameters_SiteType SiteType;
  static constexpr SiteType A =
    BasicParameters_SiteType_A;
  static constexpr SiteType B =
    BasicParameters_SiteType_B;
  static constexpr SiteType C =
    BasicParameters_SiteType_C;
  static constexpr SiteType D =
    BasicParameters_SiteType_D;
  static inline bool SiteType_IsValid(int value) {
    return BasicParameters_SiteType_IsValid(value);
  }
  static constexpr SiteType SiteType_MIN =
    BasicParameters_SiteType_SiteType_MIN;
  static constexpr SiteType SiteType_MAX =
    BasicParameters_SiteType_SiteType_MAX;
  static constexpr int SiteType_ARRAYSIZE =
    BasicParameters_SiteType_SiteType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SiteType_descriptor() {
    return BasicParameters_SiteType_descriptor();
  }
  template<typename T>
  static inline const std::string& SiteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SiteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SiteType_Name.");
    return BasicParameters_SiteType_Name(enum_t_value);
  }
  static inline bool SiteType_Parse(const std::string& name,
      SiteType* value) {
    return BasicParameters_SiteType_Parse(name, value);
  }

  typedef BasicParameters_CalculateArea CalculateArea;
  static constexpr CalculateArea Corner =
    BasicParameters_CalculateArea_Corner;
  static constexpr CalculateArea Wall =
    BasicParameters_CalculateArea_Wall;
  static constexpr CalculateArea Other =
    BasicParameters_CalculateArea_Other;
  static inline bool CalculateArea_IsValid(int value) {
    return BasicParameters_CalculateArea_IsValid(value);
  }
  static constexpr CalculateArea CalculateArea_MIN =
    BasicParameters_CalculateArea_CalculateArea_MIN;
  static constexpr CalculateArea CalculateArea_MAX =
    BasicParameters_CalculateArea_CalculateArea_MAX;
  static constexpr int CalculateArea_ARRAYSIZE =
    BasicParameters_CalculateArea_CalculateArea_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CalculateArea_descriptor() {
    return BasicParameters_CalculateArea_descriptor();
  }
  template<typename T>
  static inline const std::string& CalculateArea_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CalculateArea>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CalculateArea_Name.");
    return BasicParameters_CalculateArea_Name(enum_t_value);
  }
  static inline bool CalculateArea_Parse(const std::string& name,
      CalculateArea* value) {
    return BasicParameters_CalculateArea_Parse(name, value);
  }

  typedef BasicParameters_SeismicFortification SeismicFortification;
  static constexpr SeismicFortification STANDARD =
    BasicParameters_SeismicFortification_STANDARD;
  static constexpr SeismicFortification EMPHASIS =
    BasicParameters_SeismicFortification_EMPHASIS;
  static constexpr SeismicFortification SPECIAL =
    BasicParameters_SeismicFortification_SPECIAL;
  static constexpr SeismicFortification MODERATE =
    BasicParameters_SeismicFortification_MODERATE;
  static inline bool SeismicFortification_IsValid(int value) {
    return BasicParameters_SeismicFortification_IsValid(value);
  }
  static constexpr SeismicFortification SeismicFortification_MIN =
    BasicParameters_SeismicFortification_SeismicFortification_MIN;
  static constexpr SeismicFortification SeismicFortification_MAX =
    BasicParameters_SeismicFortification_SeismicFortification_MAX;
  static constexpr int SeismicFortification_ARRAYSIZE =
    BasicParameters_SeismicFortification_SeismicFortification_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeismicFortification_descriptor() {
    return BasicParameters_SeismicFortification_descriptor();
  }
  template<typename T>
  static inline const std::string& SeismicFortification_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeismicFortification>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeismicFortification_Name.");
    return BasicParameters_SeismicFortification_Name(enum_t_value);
  }
  static inline bool SeismicFortification_Parse(const std::string& name,
      SeismicFortification* value) {
    return BasicParameters_SeismicFortification_Parse(name, value);
  }

  typedef BasicParameters_SeismicSiteType SeismicSiteType;
  static constexpr SeismicSiteType I0 =
    BasicParameters_SeismicSiteType_I0;
  static constexpr SeismicSiteType I1 =
    BasicParameters_SeismicSiteType_I1;
  static constexpr SeismicSiteType II =
    BasicParameters_SeismicSiteType_II;
  static constexpr SeismicSiteType III =
    BasicParameters_SeismicSiteType_III;
  static constexpr SeismicSiteType IV =
    BasicParameters_SeismicSiteType_IV;
  static inline bool SeismicSiteType_IsValid(int value) {
    return BasicParameters_SeismicSiteType_IsValid(value);
  }
  static constexpr SeismicSiteType SeismicSiteType_MIN =
    BasicParameters_SeismicSiteType_SeismicSiteType_MIN;
  static constexpr SeismicSiteType SeismicSiteType_MAX =
    BasicParameters_SeismicSiteType_SeismicSiteType_MAX;
  static constexpr int SeismicSiteType_ARRAYSIZE =
    BasicParameters_SeismicSiteType_SeismicSiteType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SeismicSiteType_descriptor() {
    return BasicParameters_SeismicSiteType_descriptor();
  }
  template<typename T>
  static inline const std::string& SeismicSiteType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeismicSiteType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SeismicSiteType_Name.");
    return BasicParameters_SeismicSiteType_Name(enum_t_value);
  }
  static inline bool SeismicSiteType_Parse(const std::string& name,
      SeismicSiteType* value) {
    return BasicParameters_SeismicSiteType_Parse(name, value);
  }

  typedef BasicParameters_WindLoadCalMethod WindLoadCalMethod;
  static constexpr WindLoadCalMethod LOADCODE =
    BasicParameters_WindLoadCalMethod_LOADCODE;
  static constexpr WindLoadCalMethod CUSTOMIZE =
    BasicParameters_WindLoadCalMethod_CUSTOMIZE;
  static constexpr WindLoadCalMethod ACTUALCAL =
    BasicParameters_WindLoadCalMethod_ACTUALCAL;
  static inline bool WindLoadCalMethod_IsValid(int value) {
    return BasicParameters_WindLoadCalMethod_IsValid(value);
  }
  static constexpr WindLoadCalMethod WindLoadCalMethod_MIN =
    BasicParameters_WindLoadCalMethod_WindLoadCalMethod_MIN;
  static constexpr WindLoadCalMethod WindLoadCalMethod_MAX =
    BasicParameters_WindLoadCalMethod_WindLoadCalMethod_MAX;
  static constexpr int WindLoadCalMethod_ARRAYSIZE =
    BasicParameters_WindLoadCalMethod_WindLoadCalMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WindLoadCalMethod_descriptor() {
    return BasicParameters_WindLoadCalMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& WindLoadCalMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WindLoadCalMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WindLoadCalMethod_Name.");
    return BasicParameters_WindLoadCalMethod_Name(enum_t_value);
  }
  static inline bool WindLoadCalMethod_Parse(const std::string& name,
      WindLoadCalMethod* value) {
    return BasicParameters_WindLoadCalMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kW0FieldNumber = 1,
    kMEDesignYearsFieldNumber = 2,
    kMESiteTypeFieldNumber = 3,
    kMECalAreaFieldNumber = 4,
    kMEWindCalMethodFieldNumber = 5,
    kMESeismicFortFieldNumber = 6,
    kMESeismicSiteTypeFieldNumber = 7,
    kMUSlFieldNumber = 8,
    kMWindLoadNominalValueFieldNumber = 9,
    kMAlphaMaxFieldNumber = 10,
  };
  // double w0 = 1;
  void clear_w0();
  double w0() const;
  void set_w0(double value);
  private:
  double _internal_w0() const;
  void _internal_set_w0(double value);
  public:

  // .Xproject.BasicParameters.DesignYears m_eDesignYears = 2;
  void clear_m_edesignyears();
  ::Xproject::BasicParameters_DesignYears m_edesignyears() const;
  void set_m_edesignyears(::Xproject::BasicParameters_DesignYears value);
  private:
  ::Xproject::BasicParameters_DesignYears _internal_m_edesignyears() const;
  void _internal_set_m_edesignyears(::Xproject::BasicParameters_DesignYears value);
  public:

  // .Xproject.BasicParameters.SiteType m_eSiteType = 3;
  void clear_m_esitetype();
  ::Xproject::BasicParameters_SiteType m_esitetype() const;
  void set_m_esitetype(::Xproject::BasicParameters_SiteType value);
  private:
  ::Xproject::BasicParameters_SiteType _internal_m_esitetype() const;
  void _internal_set_m_esitetype(::Xproject::BasicParameters_SiteType value);
  public:

  // .Xproject.BasicParameters.CalculateArea m_eCalArea = 4;
  void clear_m_ecalarea();
  ::Xproject::BasicParameters_CalculateArea m_ecalarea() const;
  void set_m_ecalarea(::Xproject::BasicParameters_CalculateArea value);
  private:
  ::Xproject::BasicParameters_CalculateArea _internal_m_ecalarea() const;
  void _internal_set_m_ecalarea(::Xproject::BasicParameters_CalculateArea value);
  public:

  // .Xproject.BasicParameters.WindLoadCalMethod m_eWindCalMethod = 5;
  void clear_m_ewindcalmethod();
  ::Xproject::BasicParameters_WindLoadCalMethod m_ewindcalmethod() const;
  void set_m_ewindcalmethod(::Xproject::BasicParameters_WindLoadCalMethod value);
  private:
  ::Xproject::BasicParameters_WindLoadCalMethod _internal_m_ewindcalmethod() const;
  void _internal_set_m_ewindcalmethod(::Xproject::BasicParameters_WindLoadCalMethod value);
  public:

  // .Xproject.BasicParameters.SeismicFortification m_eSeismicFort = 6;
  void clear_m_eseismicfort();
  ::Xproject::BasicParameters_SeismicFortification m_eseismicfort() const;
  void set_m_eseismicfort(::Xproject::BasicParameters_SeismicFortification value);
  private:
  ::Xproject::BasicParameters_SeismicFortification _internal_m_eseismicfort() const;
  void _internal_set_m_eseismicfort(::Xproject::BasicParameters_SeismicFortification value);
  public:

  // .Xproject.BasicParameters.SeismicSiteType m_eSeismicSiteType = 7;
  void clear_m_eseismicsitetype();
  ::Xproject::BasicParameters_SeismicSiteType m_eseismicsitetype() const;
  void set_m_eseismicsitetype(::Xproject::BasicParameters_SeismicSiteType value);
  private:
  ::Xproject::BasicParameters_SeismicSiteType _internal_m_eseismicsitetype() const;
  void _internal_set_m_eseismicsitetype(::Xproject::BasicParameters_SeismicSiteType value);
  public:

  // double m_u_sl = 8;
  void clear_m_u_sl();
  double m_u_sl() const;
  void set_m_u_sl(double value);
  private:
  double _internal_m_u_sl() const;
  void _internal_set_m_u_sl(double value);
  public:

  // double m_WindLoadNominalValue = 9;
  void clear_m_windloadnominalvalue();
  double m_windloadnominalvalue() const;
  void set_m_windloadnominalvalue(double value);
  private:
  double _internal_m_windloadnominalvalue() const;
  void _internal_set_m_windloadnominalvalue(double value);
  public:

  // double m_alpha_max = 10;
  void clear_m_alpha_max();
  double m_alpha_max() const;
  void set_m_alpha_max(double value);
  private:
  double _internal_m_alpha_max() const;
  void _internal_set_m_alpha_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:Xproject.BasicParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double w0_;
  int m_edesignyears_;
  int m_esitetype_;
  int m_ecalarea_;
  int m_ewindcalmethod_;
  int m_eseismicfort_;
  int m_eseismicsitetype_;
  double m_u_sl_;
  double m_windloadnominalvalue_;
  double m_alpha_max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_basicParameters_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BasicParameters

// double w0 = 1;
inline void BasicParameters::clear_w0() {
  w0_ = 0;
}
inline double BasicParameters::_internal_w0() const {
  return w0_;
}
inline double BasicParameters::w0() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.w0)
  return _internal_w0();
}
inline void BasicParameters::_internal_set_w0(double value) {
  
  w0_ = value;
}
inline void BasicParameters::set_w0(double value) {
  _internal_set_w0(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.w0)
}

// .Xproject.BasicParameters.DesignYears m_eDesignYears = 2;
inline void BasicParameters::clear_m_edesignyears() {
  m_edesignyears_ = 0;
}
inline ::Xproject::BasicParameters_DesignYears BasicParameters::_internal_m_edesignyears() const {
  return static_cast< ::Xproject::BasicParameters_DesignYears >(m_edesignyears_);
}
inline ::Xproject::BasicParameters_DesignYears BasicParameters::m_edesignyears() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eDesignYears)
  return _internal_m_edesignyears();
}
inline void BasicParameters::_internal_set_m_edesignyears(::Xproject::BasicParameters_DesignYears value) {
  
  m_edesignyears_ = value;
}
inline void BasicParameters::set_m_edesignyears(::Xproject::BasicParameters_DesignYears value) {
  _internal_set_m_edesignyears(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eDesignYears)
}

// .Xproject.BasicParameters.SiteType m_eSiteType = 3;
inline void BasicParameters::clear_m_esitetype() {
  m_esitetype_ = 0;
}
inline ::Xproject::BasicParameters_SiteType BasicParameters::_internal_m_esitetype() const {
  return static_cast< ::Xproject::BasicParameters_SiteType >(m_esitetype_);
}
inline ::Xproject::BasicParameters_SiteType BasicParameters::m_esitetype() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eSiteType)
  return _internal_m_esitetype();
}
inline void BasicParameters::_internal_set_m_esitetype(::Xproject::BasicParameters_SiteType value) {
  
  m_esitetype_ = value;
}
inline void BasicParameters::set_m_esitetype(::Xproject::BasicParameters_SiteType value) {
  _internal_set_m_esitetype(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eSiteType)
}

// .Xproject.BasicParameters.CalculateArea m_eCalArea = 4;
inline void BasicParameters::clear_m_ecalarea() {
  m_ecalarea_ = 0;
}
inline ::Xproject::BasicParameters_CalculateArea BasicParameters::_internal_m_ecalarea() const {
  return static_cast< ::Xproject::BasicParameters_CalculateArea >(m_ecalarea_);
}
inline ::Xproject::BasicParameters_CalculateArea BasicParameters::m_ecalarea() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eCalArea)
  return _internal_m_ecalarea();
}
inline void BasicParameters::_internal_set_m_ecalarea(::Xproject::BasicParameters_CalculateArea value) {
  
  m_ecalarea_ = value;
}
inline void BasicParameters::set_m_ecalarea(::Xproject::BasicParameters_CalculateArea value) {
  _internal_set_m_ecalarea(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eCalArea)
}

// .Xproject.BasicParameters.WindLoadCalMethod m_eWindCalMethod = 5;
inline void BasicParameters::clear_m_ewindcalmethod() {
  m_ewindcalmethod_ = 0;
}
inline ::Xproject::BasicParameters_WindLoadCalMethod BasicParameters::_internal_m_ewindcalmethod() const {
  return static_cast< ::Xproject::BasicParameters_WindLoadCalMethod >(m_ewindcalmethod_);
}
inline ::Xproject::BasicParameters_WindLoadCalMethod BasicParameters::m_ewindcalmethod() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eWindCalMethod)
  return _internal_m_ewindcalmethod();
}
inline void BasicParameters::_internal_set_m_ewindcalmethod(::Xproject::BasicParameters_WindLoadCalMethod value) {
  
  m_ewindcalmethod_ = value;
}
inline void BasicParameters::set_m_ewindcalmethod(::Xproject::BasicParameters_WindLoadCalMethod value) {
  _internal_set_m_ewindcalmethod(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eWindCalMethod)
}

// .Xproject.BasicParameters.SeismicFortification m_eSeismicFort = 6;
inline void BasicParameters::clear_m_eseismicfort() {
  m_eseismicfort_ = 0;
}
inline ::Xproject::BasicParameters_SeismicFortification BasicParameters::_internal_m_eseismicfort() const {
  return static_cast< ::Xproject::BasicParameters_SeismicFortification >(m_eseismicfort_);
}
inline ::Xproject::BasicParameters_SeismicFortification BasicParameters::m_eseismicfort() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eSeismicFort)
  return _internal_m_eseismicfort();
}
inline void BasicParameters::_internal_set_m_eseismicfort(::Xproject::BasicParameters_SeismicFortification value) {
  
  m_eseismicfort_ = value;
}
inline void BasicParameters::set_m_eseismicfort(::Xproject::BasicParameters_SeismicFortification value) {
  _internal_set_m_eseismicfort(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eSeismicFort)
}

// .Xproject.BasicParameters.SeismicSiteType m_eSeismicSiteType = 7;
inline void BasicParameters::clear_m_eseismicsitetype() {
  m_eseismicsitetype_ = 0;
}
inline ::Xproject::BasicParameters_SeismicSiteType BasicParameters::_internal_m_eseismicsitetype() const {
  return static_cast< ::Xproject::BasicParameters_SeismicSiteType >(m_eseismicsitetype_);
}
inline ::Xproject::BasicParameters_SeismicSiteType BasicParameters::m_eseismicsitetype() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_eSeismicSiteType)
  return _internal_m_eseismicsitetype();
}
inline void BasicParameters::_internal_set_m_eseismicsitetype(::Xproject::BasicParameters_SeismicSiteType value) {
  
  m_eseismicsitetype_ = value;
}
inline void BasicParameters::set_m_eseismicsitetype(::Xproject::BasicParameters_SeismicSiteType value) {
  _internal_set_m_eseismicsitetype(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_eSeismicSiteType)
}

// double m_u_sl = 8;
inline void BasicParameters::clear_m_u_sl() {
  m_u_sl_ = 0;
}
inline double BasicParameters::_internal_m_u_sl() const {
  return m_u_sl_;
}
inline double BasicParameters::m_u_sl() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_u_sl)
  return _internal_m_u_sl();
}
inline void BasicParameters::_internal_set_m_u_sl(double value) {
  
  m_u_sl_ = value;
}
inline void BasicParameters::set_m_u_sl(double value) {
  _internal_set_m_u_sl(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_u_sl)
}

// double m_WindLoadNominalValue = 9;
inline void BasicParameters::clear_m_windloadnominalvalue() {
  m_windloadnominalvalue_ = 0;
}
inline double BasicParameters::_internal_m_windloadnominalvalue() const {
  return m_windloadnominalvalue_;
}
inline double BasicParameters::m_windloadnominalvalue() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_WindLoadNominalValue)
  return _internal_m_windloadnominalvalue();
}
inline void BasicParameters::_internal_set_m_windloadnominalvalue(double value) {
  
  m_windloadnominalvalue_ = value;
}
inline void BasicParameters::set_m_windloadnominalvalue(double value) {
  _internal_set_m_windloadnominalvalue(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_WindLoadNominalValue)
}

// double m_alpha_max = 10;
inline void BasicParameters::clear_m_alpha_max() {
  m_alpha_max_ = 0;
}
inline double BasicParameters::_internal_m_alpha_max() const {
  return m_alpha_max_;
}
inline double BasicParameters::m_alpha_max() const {
  // @@protoc_insertion_point(field_get:Xproject.BasicParameters.m_alpha_max)
  return _internal_m_alpha_max();
}
inline void BasicParameters::_internal_set_m_alpha_max(double value) {
  
  m_alpha_max_ = value;
}
inline void BasicParameters::set_m_alpha_max(double value) {
  _internal_set_m_alpha_max(value);
  // @@protoc_insertion_point(field_set:Xproject.BasicParameters.m_alpha_max)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Xproject

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Xproject::BasicParameters_DesignYears> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_DesignYears>() {
  return ::Xproject::BasicParameters_DesignYears_descriptor();
}
template <> struct is_proto_enum< ::Xproject::BasicParameters_SiteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_SiteType>() {
  return ::Xproject::BasicParameters_SiteType_descriptor();
}
template <> struct is_proto_enum< ::Xproject::BasicParameters_CalculateArea> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_CalculateArea>() {
  return ::Xproject::BasicParameters_CalculateArea_descriptor();
}
template <> struct is_proto_enum< ::Xproject::BasicParameters_SeismicFortification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_SeismicFortification>() {
  return ::Xproject::BasicParameters_SeismicFortification_descriptor();
}
template <> struct is_proto_enum< ::Xproject::BasicParameters_SeismicSiteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_SeismicSiteType>() {
  return ::Xproject::BasicParameters_SeismicSiteType_descriptor();
}
template <> struct is_proto_enum< ::Xproject::BasicParameters_WindLoadCalMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::BasicParameters_WindLoadCalMethod>() {
  return ::Xproject::BasicParameters_WindLoadCalMethod_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_basicParameters_2eproto
