// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc_glass.proto

#include "grpc_glass.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_grpc_5fbasicParameters_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_grpc_BasicParameters_grpc_5fbasicParameters_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grpc_5fcheckResult_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_grpc_CommonCalResult_grpc_5fcheckResult_2eproto;
namespace Xproject {
class GlassRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlassRequest> _instance;
} _GlassRequest_default_instance_;
class GlassCalReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlassCalReply> _instance;
} _GlassCalReply_default_instance_;
class GlassBookReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlassBookReply> _instance;
} _GlassBookReply_default_instance_;
}  // namespace Xproject
static void InitDefaultsscc_info_GlassBookReply_grpc_5fglass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Xproject::_GlassBookReply_default_instance_;
    new (ptr) ::Xproject::GlassBookReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Xproject::GlassBookReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GlassBookReply_grpc_5fglass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GlassBookReply_grpc_5fglass_2eproto}, {}};

static void InitDefaultsscc_info_GlassCalReply_grpc_5fglass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Xproject::_GlassCalReply_default_instance_;
    new (ptr) ::Xproject::GlassCalReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Xproject::GlassCalReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlassCalReply_grpc_5fglass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlassCalReply_grpc_5fglass_2eproto}, {
      &scc_info_grpc_CommonCalResult_grpc_5fcheckResult_2eproto.base,}};

static void InitDefaultsscc_info_GlassRequest_grpc_5fglass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Xproject::_GlassRequest_default_instance_;
    new (ptr) ::Xproject::GlassRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Xproject::GlassRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlassRequest_grpc_5fglass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GlassRequest_grpc_5fglass_2eproto}, {
      &scc_info_grpc_BasicParameters_grpc_5fbasicParameters_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grpc_5fglass_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_grpc_5fglass_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grpc_5fglass_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grpc_5fglass_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, parameters_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, width_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, height_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, mat_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, thickness_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassRequest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassCalReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassCalReply, calresults_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassCalReply, type_),
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassCalReply, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassBookReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Xproject::GlassBookReply, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Xproject::GlassRequest)},
  { 11, -1, sizeof(::Xproject::GlassCalReply)},
  { 19, -1, sizeof(::Xproject::GlassBookReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Xproject::_GlassRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Xproject::_GlassCalReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Xproject::_GlassBookReply_default_instance_),
};

const char descriptor_table_protodef_grpc_5fglass_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020grpc_glass.proto\022\010Xproject\032\032grpc_basic"
  "Parameters.proto\032\026grpc_checkResult.proto"
  "\"\370\001\n\014GlassRequest\0222\n\nparameters\030\001 \001(\0132\036."
  "Xproject.grpc_BasicParameters\022\r\n\005width\030\002"
  " \001(\001\022\016\n\006height\030\003 \001(\001\0221\n\003mat\030\004 \001(\0162$.Xpro"
  "ject.GlassRequest.GlassMaterial\022\021\n\tthick"
  "ness\030\005 \003(\001\022&\n\004type\030\006 \001(\0162\030.Xproject.grpc"
  "_GlassType\"\'\n\rGlassMaterial\022\010\n\004FLAT\020\000\022\014\n"
  "\010TEMPERED\020\001\"\200\001\n\rGlassCalReply\0222\n\ncalResu"
  "lts\030\001 \001(\0132\036.Xproject.grpc_CommonCalResul"
  "t\022&\n\004type\030\002 \001(\0162\030.Xproject.grpc_GlassTyp"
  "e\022\023\n\013description\030\003 \001(\t\" \n\016GlassBookReply"
  "\022\016\n\006result\030\001 \001(\t*}\n\016grpc_GlassType\022\007\n\003ON"
  "E\020\000\022\n\n\006HOLLOW\020\001\022\014\n\010LAMINATE\020\002\022\027\n\023HOLLOW_"
  "AND_LAMINATE\020\003\022\020\n\014DOUBLEHOLLOW\020\004\022\035\n\031DOUB"
  "LELAMINATE_AND_HOLLOW\020\005*=\n\035grpc_eOneGlas"
  "sPanelResultType\022\014\n\010STRENGTH\020\000\022\016\n\nDEFLEC"
  "TION\020\0012L\n\ngrpc_Glass\022>\n\tCalculate\022\026.Xpro"
  "ject.GlassRequest\032\027.Xproject.GlassCalRep"
  "ly\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grpc_5fglass_2eproto_deps[2] = {
  &::descriptor_table_grpc_5fbasicParameters_2eproto,
  &::descriptor_table_grpc_5fcheckResult_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grpc_5fglass_2eproto_sccs[3] = {
  &scc_info_GlassBookReply_grpc_5fglass_2eproto.base,
  &scc_info_GlassCalReply_grpc_5fglass_2eproto.base,
  &scc_info_GlassRequest_grpc_5fglass_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grpc_5fglass_2eproto_once;
static bool descriptor_table_grpc_5fglass_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grpc_5fglass_2eproto = {
  &descriptor_table_grpc_5fglass_2eproto_initialized, descriptor_table_protodef_grpc_5fglass_2eproto, "grpc_glass.proto", 772,
  &descriptor_table_grpc_5fglass_2eproto_once, descriptor_table_grpc_5fglass_2eproto_sccs, descriptor_table_grpc_5fglass_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_grpc_5fglass_2eproto::offsets,
  file_level_metadata_grpc_5fglass_2eproto, 3, file_level_enum_descriptors_grpc_5fglass_2eproto, file_level_service_descriptors_grpc_5fglass_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grpc_5fglass_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grpc_5fglass_2eproto), true);
namespace Xproject {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlassRequest_GlassMaterial_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpc_5fglass_2eproto);
  return file_level_enum_descriptors_grpc_5fglass_2eproto[0];
}
bool GlassRequest_GlassMaterial_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GlassRequest_GlassMaterial GlassRequest::FLAT;
constexpr GlassRequest_GlassMaterial GlassRequest::TEMPERED;
constexpr GlassRequest_GlassMaterial GlassRequest::GlassMaterial_MIN;
constexpr GlassRequest_GlassMaterial GlassRequest::GlassMaterial_MAX;
constexpr int GlassRequest::GlassMaterial_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* grpc_GlassType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpc_5fglass_2eproto);
  return file_level_enum_descriptors_grpc_5fglass_2eproto[1];
}
bool grpc_GlassType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* grpc_eOneGlassPanelResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grpc_5fglass_2eproto);
  return file_level_enum_descriptors_grpc_5fglass_2eproto[2];
}
bool grpc_eOneGlassPanelResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GlassRequest::InitAsDefaultInstance() {
  ::Xproject::_GlassRequest_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::Xproject::grpc_BasicParameters*>(
      ::Xproject::grpc_BasicParameters::internal_default_instance());
}
class GlassRequest::_Internal {
 public:
  static const ::Xproject::grpc_BasicParameters& parameters(const GlassRequest* msg);
};

const ::Xproject::grpc_BasicParameters&
GlassRequest::_Internal::parameters(const GlassRequest* msg) {
  return *msg->parameters_;
}
void GlassRequest::clear_parameters() {
  if (GetArenaNoVirtual() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
}
GlassRequest::GlassRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xproject.GlassRequest)
}
GlassRequest::GlassRequest(const GlassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      thickness_(from.thickness_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_parameters()) {
    parameters_ = new ::Xproject::grpc_BasicParameters(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&width_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Xproject.GlassRequest)
}

void GlassRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlassRequest_grpc_5fglass_2eproto.base);
  ::memset(&parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&parameters_)) + sizeof(type_));
}

GlassRequest::~GlassRequest() {
  // @@protoc_insertion_point(destructor:Xproject.GlassRequest)
  SharedDtor();
}

void GlassRequest::SharedDtor() {
  if (this != internal_default_instance()) delete parameters_;
}

void GlassRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlassRequest& GlassRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlassRequest_grpc_5fglass_2eproto.base);
  return *internal_default_instance();
}


void GlassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Xproject.GlassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thickness_.Clear();
  if (GetArenaNoVirtual() == nullptr && parameters_ != nullptr) {
    delete parameters_;
  }
  parameters_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&width_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* GlassRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Xproject.grpc_BasicParameters parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Xproject.GlassRequest.GlassMaterial mat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mat(static_cast<::Xproject::GlassRequest_GlassMaterial>(val));
        } else goto handle_unusual;
        continue;
      // repeated double thickness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_thickness(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_thickness(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .Xproject.grpc_GlassType type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Xproject::grpc_GlassType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlassRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xproject.GlassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Xproject.grpc_BasicParameters parameters = 1;
  if (this->has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::parameters(this), target, stream);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // .Xproject.GlassRequest.GlassMaterial mat = 4;
  if (this->mat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_mat(), target);
  }

  // repeated double thickness = 5;
  if (this->_internal_thickness_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_thickness(), target);
  }

  // .Xproject.grpc_GlassType type = 6;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Xproject.GlassRequest)
  return target;
}

size_t GlassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Xproject.GlassRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double thickness = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_thickness_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _thickness_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .Xproject.grpc_BasicParameters parameters = 1;
  if (this->has_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // .Xproject.GlassRequest.GlassMaterial mat = 4;
  if (this->mat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mat());
  }

  // .Xproject.grpc_GlassType type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlassRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Xproject.GlassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GlassRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlassRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Xproject.GlassRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Xproject.GlassRequest)
    MergeFrom(*source);
  }
}

void GlassRequest::MergeFrom(const GlassRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Xproject.GlassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thickness_.MergeFrom(from.thickness_);
  if (from.has_parameters()) {
    _internal_mutable_parameters()->::Xproject::grpc_BasicParameters::MergeFrom(from._internal_parameters());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (from.mat() != 0) {
    _internal_set_mat(from._internal_mat());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GlassRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Xproject.GlassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlassRequest::CopyFrom(const GlassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Xproject.GlassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlassRequest::IsInitialized() const {
  return true;
}

void GlassRequest::InternalSwap(GlassRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  thickness_.InternalSwap(&other->thickness_);
  swap(parameters_, other->parameters_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(mat_, other->mat_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlassRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlassCalReply::InitAsDefaultInstance() {
  ::Xproject::_GlassCalReply_default_instance_._instance.get_mutable()->calresults_ = const_cast< ::Xproject::grpc_CommonCalResult*>(
      ::Xproject::grpc_CommonCalResult::internal_default_instance());
}
class GlassCalReply::_Internal {
 public:
  static const ::Xproject::grpc_CommonCalResult& calresults(const GlassCalReply* msg);
};

const ::Xproject::grpc_CommonCalResult&
GlassCalReply::_Internal::calresults(const GlassCalReply* msg) {
  return *msg->calresults_;
}
void GlassCalReply::clear_calresults() {
  if (GetArenaNoVirtual() == nullptr && calresults_ != nullptr) {
    delete calresults_;
  }
  calresults_ = nullptr;
}
GlassCalReply::GlassCalReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xproject.GlassCalReply)
}
GlassCalReply::GlassCalReply(const GlassCalReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from._internal_has_calresults()) {
    calresults_ = new ::Xproject::grpc_CommonCalResult(*from.calresults_);
  } else {
    calresults_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Xproject.GlassCalReply)
}

void GlassCalReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlassCalReply_grpc_5fglass_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&calresults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&calresults_)) + sizeof(type_));
}

GlassCalReply::~GlassCalReply() {
  // @@protoc_insertion_point(destructor:Xproject.GlassCalReply)
  SharedDtor();
}

void GlassCalReply::SharedDtor() {
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete calresults_;
}

void GlassCalReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlassCalReply& GlassCalReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlassCalReply_grpc_5fglass_2eproto.base);
  return *internal_default_instance();
}


void GlassCalReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Xproject.GlassCalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && calresults_ != nullptr) {
    delete calresults_;
  }
  calresults_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* GlassCalReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Xproject.grpc_CommonCalResult calResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_calresults(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Xproject.grpc_GlassType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Xproject::grpc_GlassType>(val));
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Xproject.GlassCalReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlassCalReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xproject.GlassCalReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Xproject.grpc_CommonCalResult calResults = 1;
  if (this->has_calresults()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::calresults(this), target, stream);
  }

  // .Xproject.grpc_GlassType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Xproject.GlassCalReply.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Xproject.GlassCalReply)
  return target;
}

size_t GlassCalReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Xproject.GlassCalReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .Xproject.grpc_CommonCalResult calResults = 1;
  if (this->has_calresults()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calresults_);
  }

  // .Xproject.grpc_GlassType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlassCalReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Xproject.GlassCalReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GlassCalReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlassCalReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Xproject.GlassCalReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Xproject.GlassCalReply)
    MergeFrom(*source);
  }
}

void GlassCalReply::MergeFrom(const GlassCalReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Xproject.GlassCalReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_calresults()) {
    _internal_mutable_calresults()->::Xproject::grpc_CommonCalResult::MergeFrom(from._internal_calresults());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GlassCalReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Xproject.GlassCalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlassCalReply::CopyFrom(const GlassCalReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Xproject.GlassCalReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlassCalReply::IsInitialized() const {
  return true;
}

void GlassCalReply::InternalSwap(GlassCalReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(calresults_, other->calresults_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlassCalReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GlassBookReply::InitAsDefaultInstance() {
}
class GlassBookReply::_Internal {
 public:
};

GlassBookReply::GlassBookReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Xproject.GlassBookReply)
}
GlassBookReply::GlassBookReply(const GlassBookReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  // @@protoc_insertion_point(copy_constructor:Xproject.GlassBookReply)
}

void GlassBookReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlassBookReply_grpc_5fglass_2eproto.base);
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GlassBookReply::~GlassBookReply() {
  // @@protoc_insertion_point(destructor:Xproject.GlassBookReply)
  SharedDtor();
}

void GlassBookReply::SharedDtor() {
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GlassBookReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlassBookReply& GlassBookReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlassBookReply_grpc_5fglass_2eproto.base);
  return *internal_default_instance();
}


void GlassBookReply::Clear() {
// @@protoc_insertion_point(message_clear_start:Xproject.GlassBookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GlassBookReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Xproject.GlassBookReply.result"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlassBookReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Xproject.GlassBookReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result().data(), static_cast<int>(this->_internal_result().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Xproject.GlassBookReply.result");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Xproject.GlassBookReply)
  return target;
}

size_t GlassBookReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Xproject.GlassBookReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlassBookReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Xproject.GlassBookReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GlassBookReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlassBookReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Xproject.GlassBookReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Xproject.GlassBookReply)
    MergeFrom(*source);
  }
}

void GlassBookReply::MergeFrom(const GlassBookReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Xproject.GlassBookReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
}

void GlassBookReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Xproject.GlassBookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlassBookReply::CopyFrom(const GlassBookReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Xproject.GlassBookReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlassBookReply::IsInitialized() const {
  return true;
}

void GlassBookReply::InternalSwap(GlassBookReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GlassBookReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Xproject
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Xproject::GlassRequest* Arena::CreateMaybeMessage< ::Xproject::GlassRequest >(Arena* arena) {
  return Arena::CreateInternal< ::Xproject::GlassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Xproject::GlassCalReply* Arena::CreateMaybeMessage< ::Xproject::GlassCalReply >(Arena* arena) {
  return Arena::CreateInternal< ::Xproject::GlassCalReply >(arena);
}
template<> PROTOBUF_NOINLINE ::Xproject::GlassBookReply* Arena::CreateMaybeMessage< ::Xproject::GlassBookReply >(Arena* arena) {
  return Arena::CreateInternal< ::Xproject::GlassBookReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
