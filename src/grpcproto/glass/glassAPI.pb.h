// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glassAPI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_glassAPI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_glassAPI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basicParameters.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_glassAPI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_glassAPI_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_glassAPI_2eproto;
namespace Xproject {
class GlassBookReply;
class GlassBookReplyDefaultTypeInternal;
extern GlassBookReplyDefaultTypeInternal _GlassBookReply_default_instance_;
class GlassCalReply;
class GlassCalReplyDefaultTypeInternal;
extern GlassCalReplyDefaultTypeInternal _GlassCalReply_default_instance_;
class GlassRequest;
class GlassRequestDefaultTypeInternal;
extern GlassRequestDefaultTypeInternal _GlassRequest_default_instance_;
}  // namespace Xproject
PROTOBUF_NAMESPACE_OPEN
template<> ::Xproject::GlassBookReply* Arena::CreateMaybeMessage<::Xproject::GlassBookReply>(Arena*);
template<> ::Xproject::GlassCalReply* Arena::CreateMaybeMessage<::Xproject::GlassCalReply>(Arena*);
template<> ::Xproject::GlassRequest* Arena::CreateMaybeMessage<::Xproject::GlassRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Xproject {

enum GlassRequest_GlassType : int {
  GlassRequest_GlassType_ONE = 0,
  GlassRequest_GlassType_HOLLOW = 1,
  GlassRequest_GlassType_LAMINATE = 2,
  GlassRequest_GlassType_HOLLOW_AND_LAMINATE = 3,
  GlassRequest_GlassType_DOUBLEHOLLOW = 4,
  GlassRequest_GlassType_DOUBLELAMINATE_AND_HOLLOW = 5,
  GlassRequest_GlassType_GlassRequest_GlassType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GlassRequest_GlassType_GlassRequest_GlassType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GlassRequest_GlassType_IsValid(int value);
constexpr GlassRequest_GlassType GlassRequest_GlassType_GlassType_MIN = GlassRequest_GlassType_ONE;
constexpr GlassRequest_GlassType GlassRequest_GlassType_GlassType_MAX = GlassRequest_GlassType_DOUBLELAMINATE_AND_HOLLOW;
constexpr int GlassRequest_GlassType_GlassType_ARRAYSIZE = GlassRequest_GlassType_GlassType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlassRequest_GlassType_descriptor();
template<typename T>
inline const std::string& GlassRequest_GlassType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GlassRequest_GlassType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GlassRequest_GlassType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GlassRequest_GlassType_descriptor(), enum_t_value);
}
inline bool GlassRequest_GlassType_Parse(
    const std::string& name, GlassRequest_GlassType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GlassRequest_GlassType>(
    GlassRequest_GlassType_descriptor(), name, value);
}
enum GlassRequest_GlassMaterial : int {
  GlassRequest_GlassMaterial_FLAT = 0,
  GlassRequest_GlassMaterial_TEMPERED = 1,
  GlassRequest_GlassMaterial_GlassRequest_GlassMaterial_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GlassRequest_GlassMaterial_GlassRequest_GlassMaterial_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GlassRequest_GlassMaterial_IsValid(int value);
constexpr GlassRequest_GlassMaterial GlassRequest_GlassMaterial_GlassMaterial_MIN = GlassRequest_GlassMaterial_FLAT;
constexpr GlassRequest_GlassMaterial GlassRequest_GlassMaterial_GlassMaterial_MAX = GlassRequest_GlassMaterial_TEMPERED;
constexpr int GlassRequest_GlassMaterial_GlassMaterial_ARRAYSIZE = GlassRequest_GlassMaterial_GlassMaterial_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlassRequest_GlassMaterial_descriptor();
template<typename T>
inline const std::string& GlassRequest_GlassMaterial_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GlassRequest_GlassMaterial>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GlassRequest_GlassMaterial_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GlassRequest_GlassMaterial_descriptor(), enum_t_value);
}
inline bool GlassRequest_GlassMaterial_Parse(
    const std::string& name, GlassRequest_GlassMaterial* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GlassRequest_GlassMaterial>(
    GlassRequest_GlassMaterial_descriptor(), name, value);
}
// ===================================================================

class GlassRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Xproject.GlassRequest) */ {
 public:
  GlassRequest();
  virtual ~GlassRequest();

  GlassRequest(const GlassRequest& from);
  GlassRequest(GlassRequest&& from) noexcept
    : GlassRequest() {
    *this = ::std::move(from);
  }

  inline GlassRequest& operator=(const GlassRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlassRequest& operator=(GlassRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlassRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlassRequest* internal_default_instance() {
    return reinterpret_cast<const GlassRequest*>(
               &_GlassRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GlassRequest& a, GlassRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GlassRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlassRequest* New() const final {
    return CreateMaybeMessage<GlassRequest>(nullptr);
  }

  GlassRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlassRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlassRequest& from);
  void MergeFrom(const GlassRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlassRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Xproject.GlassRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glassAPI_2eproto);
    return ::descriptor_table_glassAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GlassRequest_GlassType GlassType;
  static constexpr GlassType ONE =
    GlassRequest_GlassType_ONE;
  static constexpr GlassType HOLLOW =
    GlassRequest_GlassType_HOLLOW;
  static constexpr GlassType LAMINATE =
    GlassRequest_GlassType_LAMINATE;
  static constexpr GlassType HOLLOW_AND_LAMINATE =
    GlassRequest_GlassType_HOLLOW_AND_LAMINATE;
  static constexpr GlassType DOUBLEHOLLOW =
    GlassRequest_GlassType_DOUBLEHOLLOW;
  static constexpr GlassType DOUBLELAMINATE_AND_HOLLOW =
    GlassRequest_GlassType_DOUBLELAMINATE_AND_HOLLOW;
  static inline bool GlassType_IsValid(int value) {
    return GlassRequest_GlassType_IsValid(value);
  }
  static constexpr GlassType GlassType_MIN =
    GlassRequest_GlassType_GlassType_MIN;
  static constexpr GlassType GlassType_MAX =
    GlassRequest_GlassType_GlassType_MAX;
  static constexpr int GlassType_ARRAYSIZE =
    GlassRequest_GlassType_GlassType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GlassType_descriptor() {
    return GlassRequest_GlassType_descriptor();
  }
  template<typename T>
  static inline const std::string& GlassType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GlassType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GlassType_Name.");
    return GlassRequest_GlassType_Name(enum_t_value);
  }
  static inline bool GlassType_Parse(const std::string& name,
      GlassType* value) {
    return GlassRequest_GlassType_Parse(name, value);
  }

  typedef GlassRequest_GlassMaterial GlassMaterial;
  static constexpr GlassMaterial FLAT =
    GlassRequest_GlassMaterial_FLAT;
  static constexpr GlassMaterial TEMPERED =
    GlassRequest_GlassMaterial_TEMPERED;
  static inline bool GlassMaterial_IsValid(int value) {
    return GlassRequest_GlassMaterial_IsValid(value);
  }
  static constexpr GlassMaterial GlassMaterial_MIN =
    GlassRequest_GlassMaterial_GlassMaterial_MIN;
  static constexpr GlassMaterial GlassMaterial_MAX =
    GlassRequest_GlassMaterial_GlassMaterial_MAX;
  static constexpr int GlassMaterial_ARRAYSIZE =
    GlassRequest_GlassMaterial_GlassMaterial_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GlassMaterial_descriptor() {
    return GlassRequest_GlassMaterial_descriptor();
  }
  template<typename T>
  static inline const std::string& GlassMaterial_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GlassMaterial>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GlassMaterial_Name.");
    return GlassRequest_GlassMaterial_Name(enum_t_value);
  }
  static inline bool GlassMaterial_Parse(const std::string& name,
      GlassMaterial* value) {
    return GlassRequest_GlassMaterial_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kThicknessFieldNumber = 5,
    kMatFieldNumber = 4,
    kTypeFieldNumber = 6,
  };
  // .Xproject.BasicParameters parameters = 1;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::Xproject::BasicParameters& parameters() const;
  ::Xproject::BasicParameters* release_parameters();
  ::Xproject::BasicParameters* mutable_parameters();
  void set_allocated_parameters(::Xproject::BasicParameters* parameters);
  private:
  const ::Xproject::BasicParameters& _internal_parameters() const;
  ::Xproject::BasicParameters* _internal_mutable_parameters();
  public:

  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double thickness = 5;
  void clear_thickness();
  double thickness() const;
  void set_thickness(double value);
  private:
  double _internal_thickness() const;
  void _internal_set_thickness(double value);
  public:

  // .Xproject.GlassRequest.GlassMaterial mat = 4;
  void clear_mat();
  ::Xproject::GlassRequest_GlassMaterial mat() const;
  void set_mat(::Xproject::GlassRequest_GlassMaterial value);
  private:
  ::Xproject::GlassRequest_GlassMaterial _internal_mat() const;
  void _internal_set_mat(::Xproject::GlassRequest_GlassMaterial value);
  public:

  // .Xproject.GlassRequest.GlassType type = 6;
  void clear_type();
  ::Xproject::GlassRequest_GlassType type() const;
  void set_type(::Xproject::GlassRequest_GlassType value);
  private:
  ::Xproject::GlassRequest_GlassType _internal_type() const;
  void _internal_set_type(::Xproject::GlassRequest_GlassType value);
  public:

  // @@protoc_insertion_point(class_scope:Xproject.GlassRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Xproject::BasicParameters* parameters_;
  double width_;
  double height_;
  double thickness_;
  int mat_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glassAPI_2eproto;
};
// -------------------------------------------------------------------

class GlassCalReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Xproject.GlassCalReply) */ {
 public:
  GlassCalReply();
  virtual ~GlassCalReply();

  GlassCalReply(const GlassCalReply& from);
  GlassCalReply(GlassCalReply&& from) noexcept
    : GlassCalReply() {
    *this = ::std::move(from);
  }

  inline GlassCalReply& operator=(const GlassCalReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlassCalReply& operator=(GlassCalReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlassCalReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlassCalReply* internal_default_instance() {
    return reinterpret_cast<const GlassCalReply*>(
               &_GlassCalReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GlassCalReply& a, GlassCalReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GlassCalReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlassCalReply* New() const final {
    return CreateMaybeMessage<GlassCalReply>(nullptr);
  }

  GlassCalReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlassCalReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlassCalReply& from);
  void MergeFrom(const GlassCalReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlassCalReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Xproject.GlassCalReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glassAPI_2eproto);
    return ::descriptor_table_glassAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:Xproject.GlassCalReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glassAPI_2eproto;
};
// -------------------------------------------------------------------

class GlassBookReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Xproject.GlassBookReply) */ {
 public:
  GlassBookReply();
  virtual ~GlassBookReply();

  GlassBookReply(const GlassBookReply& from);
  GlassBookReply(GlassBookReply&& from) noexcept
    : GlassBookReply() {
    *this = ::std::move(from);
  }

  inline GlassBookReply& operator=(const GlassBookReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlassBookReply& operator=(GlassBookReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlassBookReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GlassBookReply* internal_default_instance() {
    return reinterpret_cast<const GlassBookReply*>(
               &_GlassBookReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlassBookReply& a, GlassBookReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GlassBookReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlassBookReply* New() const final {
    return CreateMaybeMessage<GlassBookReply>(nullptr);
  }

  GlassBookReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlassBookReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlassBookReply& from);
  void MergeFrom(const GlassBookReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlassBookReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Xproject.GlassBookReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glassAPI_2eproto);
    return ::descriptor_table_glassAPI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:Xproject.GlassBookReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glassAPI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GlassRequest

// .Xproject.BasicParameters parameters = 1;
inline bool GlassRequest::_internal_has_parameters() const {
  return this != internal_default_instance() && parameters_ != nullptr;
}
inline bool GlassRequest::has_parameters() const {
  return _internal_has_parameters();
}
inline const ::Xproject::BasicParameters& GlassRequest::_internal_parameters() const {
  const ::Xproject::BasicParameters* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Xproject::BasicParameters*>(
      &::Xproject::_BasicParameters_default_instance_);
}
inline const ::Xproject::BasicParameters& GlassRequest::parameters() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.parameters)
  return _internal_parameters();
}
inline ::Xproject::BasicParameters* GlassRequest::release_parameters() {
  // @@protoc_insertion_point(field_release:Xproject.GlassRequest.parameters)
  
  ::Xproject::BasicParameters* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::Xproject::BasicParameters* GlassRequest::_internal_mutable_parameters() {
  
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::Xproject::BasicParameters>(GetArenaNoVirtual());
    parameters_ = p;
  }
  return parameters_;
}
inline ::Xproject::BasicParameters* GlassRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:Xproject.GlassRequest.parameters)
  return _internal_mutable_parameters();
}
inline void GlassRequest::set_allocated_parameters(::Xproject::BasicParameters* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    
  } else {
    
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:Xproject.GlassRequest.parameters)
}

// double width = 2;
inline void GlassRequest::clear_width() {
  width_ = 0;
}
inline double GlassRequest::_internal_width() const {
  return width_;
}
inline double GlassRequest::width() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.width)
  return _internal_width();
}
inline void GlassRequest::_internal_set_width(double value) {
  
  width_ = value;
}
inline void GlassRequest::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassRequest.width)
}

// double height = 3;
inline void GlassRequest::clear_height() {
  height_ = 0;
}
inline double GlassRequest::_internal_height() const {
  return height_;
}
inline double GlassRequest::height() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.height)
  return _internal_height();
}
inline void GlassRequest::_internal_set_height(double value) {
  
  height_ = value;
}
inline void GlassRequest::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassRequest.height)
}

// .Xproject.GlassRequest.GlassMaterial mat = 4;
inline void GlassRequest::clear_mat() {
  mat_ = 0;
}
inline ::Xproject::GlassRequest_GlassMaterial GlassRequest::_internal_mat() const {
  return static_cast< ::Xproject::GlassRequest_GlassMaterial >(mat_);
}
inline ::Xproject::GlassRequest_GlassMaterial GlassRequest::mat() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.mat)
  return _internal_mat();
}
inline void GlassRequest::_internal_set_mat(::Xproject::GlassRequest_GlassMaterial value) {
  
  mat_ = value;
}
inline void GlassRequest::set_mat(::Xproject::GlassRequest_GlassMaterial value) {
  _internal_set_mat(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassRequest.mat)
}

// double thickness = 5;
inline void GlassRequest::clear_thickness() {
  thickness_ = 0;
}
inline double GlassRequest::_internal_thickness() const {
  return thickness_;
}
inline double GlassRequest::thickness() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.thickness)
  return _internal_thickness();
}
inline void GlassRequest::_internal_set_thickness(double value) {
  
  thickness_ = value;
}
inline void GlassRequest::set_thickness(double value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassRequest.thickness)
}

// .Xproject.GlassRequest.GlassType type = 6;
inline void GlassRequest::clear_type() {
  type_ = 0;
}
inline ::Xproject::GlassRequest_GlassType GlassRequest::_internal_type() const {
  return static_cast< ::Xproject::GlassRequest_GlassType >(type_);
}
inline ::Xproject::GlassRequest_GlassType GlassRequest::type() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassRequest.type)
  return _internal_type();
}
inline void GlassRequest::_internal_set_type(::Xproject::GlassRequest_GlassType value) {
  
  type_ = value;
}
inline void GlassRequest::set_type(::Xproject::GlassRequest_GlassType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassRequest.type)
}

// -------------------------------------------------------------------

// GlassCalReply

// string result = 1;
inline void GlassCalReply::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlassCalReply::result() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassCalReply.result)
  return _internal_result();
}
inline void GlassCalReply::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassCalReply.result)
}
inline std::string* GlassCalReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Xproject.GlassCalReply.result)
  return _internal_mutable_result();
}
inline const std::string& GlassCalReply::_internal_result() const {
  return result_.GetNoArena();
}
inline void GlassCalReply::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlassCalReply::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Xproject.GlassCalReply.result)
}
inline void GlassCalReply::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xproject.GlassCalReply.result)
}
inline void GlassCalReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xproject.GlassCalReply.result)
}
inline std::string* GlassCalReply::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlassCalReply::release_result() {
  // @@protoc_insertion_point(field_release:Xproject.GlassCalReply.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlassCalReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:Xproject.GlassCalReply.result)
}

// -------------------------------------------------------------------

// GlassBookReply

// string result = 1;
inline void GlassBookReply::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GlassBookReply::result() const {
  // @@protoc_insertion_point(field_get:Xproject.GlassBookReply.result)
  return _internal_result();
}
inline void GlassBookReply::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Xproject.GlassBookReply.result)
}
inline std::string* GlassBookReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Xproject.GlassBookReply.result)
  return _internal_mutable_result();
}
inline const std::string& GlassBookReply::_internal_result() const {
  return result_.GetNoArena();
}
inline void GlassBookReply::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GlassBookReply::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Xproject.GlassBookReply.result)
}
inline void GlassBookReply::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Xproject.GlassBookReply.result)
}
inline void GlassBookReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Xproject.GlassBookReply.result)
}
inline std::string* GlassBookReply::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GlassBookReply::release_result() {
  // @@protoc_insertion_point(field_release:Xproject.GlassBookReply.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GlassBookReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:Xproject.GlassBookReply.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Xproject

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Xproject::GlassRequest_GlassType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::GlassRequest_GlassType>() {
  return ::Xproject::GlassRequest_GlassType_descriptor();
}
template <> struct is_proto_enum< ::Xproject::GlassRequest_GlassMaterial> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Xproject::GlassRequest_GlassMaterial>() {
  return ::Xproject::GlassRequest_GlassMaterial_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_glassAPI_2eproto
